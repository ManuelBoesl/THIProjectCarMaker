// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarMakerData.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_CarMakerData_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_CarMakerData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_CarMakerData_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_CarMakerData_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_CarMakerData_2eproto;
namespace CMData {
class CarMakerData;
struct CarMakerDataDefaultTypeInternal;
extern CarMakerDataDefaultTypeInternal _CarMakerData_default_instance_;
class CarMakerDataGroup;
struct CarMakerDataGroupDefaultTypeInternal;
extern CarMakerDataGroupDefaultTypeInternal _CarMakerDataGroup_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
}  // namespace CMData
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CMData {

// ===================================================================


// -------------------------------------------------------------------

class Rotation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMData.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Rotation(
      ::google::protobuf::internal::ConstantInitialized);

  inline Rotation(const Rotation& from) : Rotation(nullptr, from) {}
  inline Rotation(Rotation&& from) noexcept
      : Rotation(nullptr, std::move(from)) {}
  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
        &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Rotation& a, Rotation& b) { a.Swap(&b); }
  inline void Swap(Rotation* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Rotation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Rotation& from) { Rotation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Rotation* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CMData.Rotation"; }

 protected:
  explicit Rotation(::google::protobuf::Arena* arena);
  Rotation(::google::protobuf::Arena* arena, const Rotation& from);
  Rotation(::google::protobuf::Arena* arena, Rotation&& from) noexcept
      : Rotation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRotXFieldNumber = 1,
    kRotYFieldNumber = 2,
    kRotZFieldNumber = 3,
  };
  // float RotX = 1;
  void clear_rotx() ;
  float rotx() const;
  void set_rotx(float value);

  private:
  float _internal_rotx() const;
  void _internal_set_rotx(float value);

  public:
  // float RotY = 2;
  void clear_roty() ;
  float roty() const;
  void set_roty(float value);

  private:
  float _internal_roty() const;
  void _internal_set_roty(float value);

  public:
  // float RotZ = 3;
  void clear_rotz() ;
  float rotz() const;
  void set_rotz(float value);

  private:
  float _internal_rotz() const;
  void _internal_set_rotz(float value);

  public:
  // @@protoc_insertion_point(class_scope:CMData.Rotation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float rotx_;
    float roty_;
    float rotz_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CarMakerData_2eproto;
};
// -------------------------------------------------------------------

class Position final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMData.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Position(
      ::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from) : Position(nullptr, from) {}
  inline Position(Position&& from) noexcept
      : Position(nullptr, std::move(from)) {}
  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
        &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Position& a, Position& b) { a.Swap(&b); }
  inline void Swap(Position* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Position& from) { Position::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Position* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CMData.Position"; }

 protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  Position(::google::protobuf::Arena* arena, Position&& from) noexcept
      : Position(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // float PosX = 1;
  void clear_posx() ;
  float posx() const;
  void set_posx(float value);

  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);

  public:
  // float PosY = 2;
  void clear_posy() ;
  float posy() const;
  void set_posy(float value);

  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);

  public:
  // float PosZ = 3;
  void clear_posz() ;
  float posz() const;
  void set_posz(float value);

  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);

  public:
  // @@protoc_insertion_point(class_scope:CMData.Position)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float posx_;
    float posy_;
    float posz_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CarMakerData_2eproto;
};
// -------------------------------------------------------------------

class CarMakerDataGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMData.CarMakerDataGroup) */ {
 public:
  inline CarMakerDataGroup() : CarMakerDataGroup(nullptr) {}
  ~CarMakerDataGroup() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CarMakerDataGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline CarMakerDataGroup(const CarMakerDataGroup& from) : CarMakerDataGroup(nullptr, from) {}
  inline CarMakerDataGroup(CarMakerDataGroup&& from) noexcept
      : CarMakerDataGroup(nullptr, std::move(from)) {}
  inline CarMakerDataGroup& operator=(const CarMakerDataGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarMakerDataGroup& operator=(CarMakerDataGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarMakerDataGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarMakerDataGroup* internal_default_instance() {
    return reinterpret_cast<const CarMakerDataGroup*>(
        &_CarMakerDataGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CarMakerDataGroup& a, CarMakerDataGroup& b) { a.Swap(&b); }
  inline void Swap(CarMakerDataGroup* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarMakerDataGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarMakerDataGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CarMakerDataGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CarMakerDataGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CarMakerDataGroup& from) { CarMakerDataGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CarMakerDataGroup* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CMData.CarMakerDataGroup"; }

 protected:
  explicit CarMakerDataGroup(::google::protobuf::Arena* arena);
  CarMakerDataGroup(::google::protobuf::Arena* arena, const CarMakerDataGroup& from);
  CarMakerDataGroup(::google::protobuf::Arena* arena, CarMakerDataGroup&& from) noexcept
      : CarMakerDataGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kTypeFieldNumber = 1,
    kIDFieldNumber = 2,
    kSteeringAngleFieldNumber = 5,
  };
  // .CMData.Position Position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::CMData::Position& position() const;
  PROTOBUF_NODISCARD ::CMData::Position* release_position();
  ::CMData::Position* mutable_position();
  void set_allocated_position(::CMData::Position* value);
  void unsafe_arena_set_allocated_position(::CMData::Position* value);
  ::CMData::Position* unsafe_arena_release_position();

  private:
  const ::CMData::Position& _internal_position() const;
  ::CMData::Position* _internal_mutable_position();

  public:
  // .CMData.Rotation Rotation = 4;
  bool has_rotation() const;
  void clear_rotation() ;
  const ::CMData::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::CMData::Rotation* release_rotation();
  ::CMData::Rotation* mutable_rotation();
  void set_allocated_rotation(::CMData::Rotation* value);
  void unsafe_arena_set_allocated_rotation(::CMData::Rotation* value);
  ::CMData::Rotation* unsafe_arena_release_rotation();

  private:
  const ::CMData::Rotation& _internal_rotation() const;
  ::CMData::Rotation* _internal_mutable_rotation();

  public:
  // int32 Type = 1;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // int32 ID = 2;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // float SteeringAngle = 5;
  void clear_steeringangle() ;
  float steeringangle() const;
  void set_steeringangle(float value);

  private:
  float _internal_steeringangle() const;
  void _internal_set_steeringangle(float value);

  public:
  // @@protoc_insertion_point(class_scope:CMData.CarMakerDataGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::CMData::Position* position_;
    ::CMData::Rotation* rotation_;
    ::int32_t type_;
    ::int32_t id_;
    float steeringangle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CarMakerData_2eproto;
};
// -------------------------------------------------------------------

class CarMakerData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMData.CarMakerData) */ {
 public:
  inline CarMakerData() : CarMakerData(nullptr) {}
  ~CarMakerData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CarMakerData(
      ::google::protobuf::internal::ConstantInitialized);

  inline CarMakerData(const CarMakerData& from) : CarMakerData(nullptr, from) {}
  inline CarMakerData(CarMakerData&& from) noexcept
      : CarMakerData(nullptr, std::move(from)) {}
  inline CarMakerData& operator=(const CarMakerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarMakerData& operator=(CarMakerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarMakerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarMakerData* internal_default_instance() {
    return reinterpret_cast<const CarMakerData*>(
        &_CarMakerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CarMakerData& a, CarMakerData& b) { a.Swap(&b); }
  inline void Swap(CarMakerData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarMakerData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarMakerData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CarMakerData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CarMakerData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CarMakerData& from) { CarMakerData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CarMakerData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CMData.CarMakerData"; }

 protected:
  explicit CarMakerData(::google::protobuf::Arena* arena);
  CarMakerData(::google::protobuf::Arena* arena, const CarMakerData& from);
  CarMakerData(::google::protobuf::Arena* arena, CarMakerData&& from) noexcept
      : CarMakerData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCarMakerDataGroupFieldNumber = 1,
    kTimeStampFieldNumber = 2,
    kStimulationSignalFieldNumber = 3,
  };
  // repeated .CMData.CarMakerDataGroup CarMakerDataGroup = 1;
  int carmakerdatagroup_size() const;
  private:
  int _internal_carmakerdatagroup_size() const;

  public:
  void clear_carmakerdatagroup() ;
  ::CMData::CarMakerDataGroup* mutable_carmakerdatagroup(int index);
  ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>* mutable_carmakerdatagroup();

  private:
  const ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>& _internal_carmakerdatagroup() const;
  ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>* _internal_mutable_carmakerdatagroup();
  public:
  const ::CMData::CarMakerDataGroup& carmakerdatagroup(int index) const;
  ::CMData::CarMakerDataGroup* add_carmakerdatagroup();
  const ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>& carmakerdatagroup() const;
  // string TimeStamp = 2;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // int32 StimulationSignal = 3;
  void clear_stimulationsignal() ;
  ::int32_t stimulationsignal() const;
  void set_stimulationsignal(::int32_t value);

  private:
  ::int32_t _internal_stimulationsignal() const;
  void _internal_set_stimulationsignal(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CMData.CarMakerData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::CMData::CarMakerDataGroup > carmakerdatagroup_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::int32_t stimulationsignal_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CarMakerData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CarMakerData

// repeated .CMData.CarMakerDataGroup CarMakerDataGroup = 1;
inline int CarMakerData::_internal_carmakerdatagroup_size() const {
  return _internal_carmakerdatagroup().size();
}
inline int CarMakerData::carmakerdatagroup_size() const {
  return _internal_carmakerdatagroup_size();
}
inline void CarMakerData::clear_carmakerdatagroup() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.carmakerdatagroup_.Clear();
}
inline ::CMData::CarMakerDataGroup* CarMakerData::mutable_carmakerdatagroup(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CMData.CarMakerData.CarMakerDataGroup)
  return _internal_mutable_carmakerdatagroup()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>* CarMakerData::mutable_carmakerdatagroup()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CMData.CarMakerData.CarMakerDataGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_carmakerdatagroup();
}
inline const ::CMData::CarMakerDataGroup& CarMakerData::carmakerdatagroup(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMData.CarMakerData.CarMakerDataGroup)
  return _internal_carmakerdatagroup().Get(index);
}
inline ::CMData::CarMakerDataGroup* CarMakerData::add_carmakerdatagroup() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CMData::CarMakerDataGroup* _add = _internal_mutable_carmakerdatagroup()->Add();
  // @@protoc_insertion_point(field_add:CMData.CarMakerData.CarMakerDataGroup)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>& CarMakerData::carmakerdatagroup() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CMData.CarMakerData.CarMakerDataGroup)
  return _internal_carmakerdatagroup();
}
inline const ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>&
CarMakerData::_internal_carmakerdatagroup() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.carmakerdatagroup_;
}
inline ::google::protobuf::RepeatedPtrField<::CMData::CarMakerDataGroup>*
CarMakerData::_internal_mutable_carmakerdatagroup() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.carmakerdatagroup_;
}

// string TimeStamp = 2;
inline void CarMakerData::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& CarMakerData::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMData.CarMakerData.TimeStamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CarMakerData::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMData.CarMakerData.TimeStamp)
}
inline std::string* CarMakerData::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CMData.CarMakerData.TimeStamp)
  return _s;
}
inline const std::string& CarMakerData::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_.Get();
}
inline void CarMakerData::_internal_set_timestamp(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* CarMakerData::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* CarMakerData::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CMData.CarMakerData.TimeStamp)
  return _impl_.timestamp_.Release();
}
inline void CarMakerData::set_allocated_timestamp(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.timestamp_.IsDefault()) {
          _impl_.timestamp_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMData.CarMakerData.TimeStamp)
}

// int32 StimulationSignal = 3;
inline void CarMakerData::clear_stimulationsignal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stimulationsignal_ = 0;
}
inline ::int32_t CarMakerData::stimulationsignal() const {
  // @@protoc_insertion_point(field_get:CMData.CarMakerData.StimulationSignal)
  return _internal_stimulationsignal();
}
inline void CarMakerData::set_stimulationsignal(::int32_t value) {
  _internal_set_stimulationsignal(value);
  // @@protoc_insertion_point(field_set:CMData.CarMakerData.StimulationSignal)
}
inline ::int32_t CarMakerData::_internal_stimulationsignal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stimulationsignal_;
}
inline void CarMakerData::_internal_set_stimulationsignal(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stimulationsignal_ = value;
}

// -------------------------------------------------------------------

// CarMakerDataGroup

// int32 Type = 1;
inline void CarMakerDataGroup::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::int32_t CarMakerDataGroup::type() const {
  // @@protoc_insertion_point(field_get:CMData.CarMakerDataGroup.Type)
  return _internal_type();
}
inline void CarMakerDataGroup::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMData.CarMakerDataGroup.Type)
}
inline ::int32_t CarMakerDataGroup::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void CarMakerDataGroup::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// int32 ID = 2;
inline void CarMakerDataGroup::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t CarMakerDataGroup::id() const {
  // @@protoc_insertion_point(field_get:CMData.CarMakerDataGroup.ID)
  return _internal_id();
}
inline void CarMakerDataGroup::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMData.CarMakerDataGroup.ID)
}
inline ::int32_t CarMakerDataGroup::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CarMakerDataGroup::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// .CMData.Position Position = 3;
inline bool CarMakerDataGroup::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void CarMakerDataGroup::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMData::Position& CarMakerDataGroup::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CMData::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMData::Position&>(::CMData::_Position_default_instance_);
}
inline const ::CMData::Position& CarMakerDataGroup::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMData.CarMakerDataGroup.Position)
  return _internal_position();
}
inline void CarMakerDataGroup::unsafe_arena_set_allocated_position(::CMData::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::CMData::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMData.CarMakerDataGroup.Position)
}
inline ::CMData::Position* CarMakerDataGroup::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMData::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CMData::Position* CarMakerDataGroup::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CMData.CarMakerDataGroup.Position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMData::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::CMData::Position* CarMakerDataGroup::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMData::Position>(GetArena());
    _impl_.position_ = reinterpret_cast<::CMData::Position*>(p);
  }
  return _impl_.position_;
}
inline ::CMData::Position* CarMakerDataGroup::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::CMData::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:CMData.CarMakerDataGroup.Position)
  return _msg;
}
inline void CarMakerDataGroup::set_allocated_position(::CMData::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::CMData::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:CMData.CarMakerDataGroup.Position)
}

// .CMData.Rotation Rotation = 4;
inline bool CarMakerDataGroup::has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline void CarMakerDataGroup::clear_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rotation_ != nullptr) _impl_.rotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMData::Rotation& CarMakerDataGroup::_internal_rotation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CMData::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMData::Rotation&>(::CMData::_Rotation_default_instance_);
}
inline const ::CMData::Rotation& CarMakerDataGroup::rotation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMData.CarMakerDataGroup.Rotation)
  return _internal_rotation();
}
inline void CarMakerDataGroup::unsafe_arena_set_allocated_rotation(::CMData::Rotation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = reinterpret_cast<::CMData::Rotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMData.CarMakerDataGroup.Rotation)
}
inline ::CMData::Rotation* CarMakerDataGroup::release_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMData::Rotation* released = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CMData::Rotation* CarMakerDataGroup::unsafe_arena_release_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CMData.CarMakerDataGroup.Rotation)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMData::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::CMData::Rotation* CarMakerDataGroup::_internal_mutable_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.rotation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMData::Rotation>(GetArena());
    _impl_.rotation_ = reinterpret_cast<::CMData::Rotation*>(p);
  }
  return _impl_.rotation_;
}
inline ::CMData::Rotation* CarMakerDataGroup::mutable_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::CMData::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:CMData.CarMakerDataGroup.Rotation)
  return _msg;
}
inline void CarMakerDataGroup::set_allocated_rotation(::CMData::Rotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.rotation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.rotation_ = reinterpret_cast<::CMData::Rotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:CMData.CarMakerDataGroup.Rotation)
}

// float SteeringAngle = 5;
inline void CarMakerDataGroup::clear_steeringangle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.steeringangle_ = 0;
}
inline float CarMakerDataGroup::steeringangle() const {
  // @@protoc_insertion_point(field_get:CMData.CarMakerDataGroup.SteeringAngle)
  return _internal_steeringangle();
}
inline void CarMakerDataGroup::set_steeringangle(float value) {
  _internal_set_steeringangle(value);
  // @@protoc_insertion_point(field_set:CMData.CarMakerDataGroup.SteeringAngle)
}
inline float CarMakerDataGroup::_internal_steeringangle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.steeringangle_;
}
inline void CarMakerDataGroup::_internal_set_steeringangle(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.steeringangle_ = value;
}

// -------------------------------------------------------------------

// Position

// float PosX = 1;
inline void Position::clear_posx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posx_ = 0;
}
inline float Position::posx() const {
  // @@protoc_insertion_point(field_get:CMData.Position.PosX)
  return _internal_posx();
}
inline void Position::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:CMData.Position.PosX)
}
inline float Position::_internal_posx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.posx_;
}
inline void Position::_internal_set_posx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posx_ = value;
}

// float PosY = 2;
inline void Position::clear_posy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posy_ = 0;
}
inline float Position::posy() const {
  // @@protoc_insertion_point(field_get:CMData.Position.PosY)
  return _internal_posy();
}
inline void Position::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:CMData.Position.PosY)
}
inline float Position::_internal_posy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.posy_;
}
inline void Position::_internal_set_posy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posy_ = value;
}

// float PosZ = 3;
inline void Position::clear_posz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posz_ = 0;
}
inline float Position::posz() const {
  // @@protoc_insertion_point(field_get:CMData.Position.PosZ)
  return _internal_posz();
}
inline void Position::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:CMData.Position.PosZ)
}
inline float Position::_internal_posz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.posz_;
}
inline void Position::_internal_set_posz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posz_ = value;
}

// -------------------------------------------------------------------

// Rotation

// float RotX = 1;
inline void Rotation::clear_rotx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotx_ = 0;
}
inline float Rotation::rotx() const {
  // @@protoc_insertion_point(field_get:CMData.Rotation.RotX)
  return _internal_rotx();
}
inline void Rotation::set_rotx(float value) {
  _internal_set_rotx(value);
  // @@protoc_insertion_point(field_set:CMData.Rotation.RotX)
}
inline float Rotation::_internal_rotx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotx_;
}
inline void Rotation::_internal_set_rotx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotx_ = value;
}

// float RotY = 2;
inline void Rotation::clear_roty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roty_ = 0;
}
inline float Rotation::roty() const {
  // @@protoc_insertion_point(field_get:CMData.Rotation.RotY)
  return _internal_roty();
}
inline void Rotation::set_roty(float value) {
  _internal_set_roty(value);
  // @@protoc_insertion_point(field_set:CMData.Rotation.RotY)
}
inline float Rotation::_internal_roty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roty_;
}
inline void Rotation::_internal_set_roty(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roty_ = value;
}

// float RotZ = 3;
inline void Rotation::clear_rotz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotz_ = 0;
}
inline float Rotation::rotz() const {
  // @@protoc_insertion_point(field_get:CMData.Rotation.RotZ)
  return _internal_rotz();
}
inline void Rotation::set_rotz(float value) {
  _internal_set_rotz(value);
  // @@protoc_insertion_point(field_set:CMData.Rotation.RotZ)
}
inline float Rotation::_internal_rotz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotz_;
}
inline void Rotation::_internal_set_rotz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotz_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace CMData


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_CarMakerData_2eproto_2epb_2eh
