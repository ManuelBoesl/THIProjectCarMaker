// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarMakerData.proto
// Protobuf C++ Version: 5.26.1

#include "CarMakerData.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CMData {

inline constexpr Rotation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rotx_{0},
        roty_{0},
        rotz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Rotation::Rotation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationDefaultTypeInternal _Rotation_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : posx_{0},
        posy_{0},
        posz_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr CarMakerDataGroup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        rotation_{nullptr},
        type_{0},
        id_{0},
        steeringangle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CarMakerDataGroup::CarMakerDataGroup(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CarMakerDataGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarMakerDataGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarMakerDataGroupDefaultTypeInternal() {}
  union {
    CarMakerDataGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarMakerDataGroupDefaultTypeInternal _CarMakerDataGroup_default_instance_;

inline constexpr CarMakerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : carmakerdatagroup_{},
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stimulationsignal_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CarMakerData::CarMakerData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CarMakerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarMakerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarMakerDataDefaultTypeInternal() {}
  union {
    CarMakerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarMakerDataDefaultTypeInternal _CarMakerData_default_instance_;
}  // namespace CMData
static ::_pb::Metadata file_level_metadata_CarMakerData_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_CarMakerData_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_CarMakerData_2eproto = nullptr;
const ::uint32_t
    TableStruct_CarMakerData_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerData, _impl_.carmakerdatagroup_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerData, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerData, _impl_.stimulationsignal_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _impl_.rotation_),
        PROTOBUF_FIELD_OFFSET(::CMData::CarMakerDataGroup, _impl_.steeringangle_),
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CMData::Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMData::Position, _impl_.posx_),
        PROTOBUF_FIELD_OFFSET(::CMData::Position, _impl_.posy_),
        PROTOBUF_FIELD_OFFSET(::CMData::Position, _impl_.posz_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CMData::Rotation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMData::Rotation, _impl_.rotx_),
        PROTOBUF_FIELD_OFFSET(::CMData::Rotation, _impl_.roty_),
        PROTOBUF_FIELD_OFFSET(::CMData::Rotation, _impl_.rotz_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CMData::CarMakerData)},
        {11, 24, -1, sizeof(::CMData::CarMakerDataGroup)},
        {29, -1, -1, sizeof(::CMData::Position)},
        {40, -1, -1, sizeof(::CMData::Rotation)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::CMData::_CarMakerData_default_instance_._instance,
    &::CMData::_CarMakerDataGroup_default_instance_._instance,
    &::CMData::_Position_default_instance_._instance,
    &::CMData::_Rotation_default_instance_._instance,
};
const char descriptor_table_protodef_CarMakerData_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\022CarMakerData.proto\022\006CMData\"r\n\014CarMaker"
    "Data\0224\n\021CarMakerDataGroup\030\001 \003(\0132\031.CMData"
    ".CarMakerDataGroup\022\021\n\tTimeStamp\030\002 \001(\t\022\031\n"
    "\021StimulationSignal\030\003 \001(\005\"\214\001\n\021CarMakerDat"
    "aGroup\022\014\n\004Type\030\001 \001(\005\022\n\n\002ID\030\002 \001(\005\022\"\n\010Posi"
    "tion\030\003 \001(\0132\020.CMData.Position\022\"\n\010Rotation"
    "\030\004 \001(\0132\020.CMData.Rotation\022\025\n\rSteeringAngl"
    "e\030\005 \001(\002\"4\n\010Position\022\014\n\004PosX\030\001 \001(\002\022\014\n\004Pos"
    "Y\030\002 \001(\002\022\014\n\004PosZ\030\003 \001(\002\"4\n\010Rotation\022\014\n\004Rot"
    "X\030\001 \001(\002\022\014\n\004RotY\030\002 \001(\002\022\014\n\004RotZ\030\003 \001(\002b\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_CarMakerData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CarMakerData_2eproto = {
    false,
    false,
    403,
    descriptor_table_protodef_CarMakerData_2eproto,
    "CarMakerData.proto",
    &descriptor_table_CarMakerData_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_CarMakerData_2eproto::offsets,
    file_level_metadata_CarMakerData_2eproto,
    file_level_enum_descriptors_CarMakerData_2eproto,
    file_level_service_descriptors_CarMakerData_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CarMakerData_2eproto_getter() {
  return &descriptor_table_CarMakerData_2eproto;
}
namespace CMData {
// ===================================================================

class CarMakerData::_Internal {
 public:
};

CarMakerData::CarMakerData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMData.CarMakerData)
}
inline PROTOBUF_NDEBUG_INLINE CarMakerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : carmakerdatagroup_{visibility, arena, from.carmakerdatagroup_},
        timestamp_(arena, from.timestamp_),
        _cached_size_{0} {}

CarMakerData::CarMakerData(
    ::google::protobuf::Arena* arena,
    const CarMakerData& from)
    : ::google::protobuf::Message(arena) {
  CarMakerData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.stimulationsignal_ = from._impl_.stimulationsignal_;

  // @@protoc_insertion_point(copy_constructor:CMData.CarMakerData)
}
inline PROTOBUF_NDEBUG_INLINE CarMakerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : carmakerdatagroup_{visibility, arena},
        timestamp_(arena),
        _cached_size_{0} {}

inline void CarMakerData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.stimulationsignal_ = {};
}
CarMakerData::~CarMakerData() {
  // @@protoc_insertion_point(destructor:CMData.CarMakerData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CarMakerData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.timestamp_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CarMakerData::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_._cached_size_),
              false,
          },
          &CarMakerData::MergeImpl,
          &CarMakerData::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CarMakerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMData.CarMakerData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.carmakerdatagroup_.Clear();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.stimulationsignal_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CarMakerData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 37, 2> CarMakerData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CarMakerData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMData::CarMakerData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CMData.CarMakerDataGroup CarMakerDataGroup = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_.carmakerdatagroup_)}},
    // string TimeStamp = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_.timestamp_)}},
    // int32 StimulationSignal = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CarMakerData, _impl_.stimulationsignal_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_.stimulationsignal_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CMData.CarMakerDataGroup CarMakerDataGroup = 1;
    {PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_.carmakerdatagroup_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string TimeStamp = 2;
    {PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 StimulationSignal = 3;
    {PROTOBUF_FIELD_OFFSET(CarMakerData, _impl_.stimulationsignal_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMData::CarMakerDataGroup>()},
  }}, {{
    "\23\0\11\0\0\0\0\0"
    "CMData.CarMakerData"
    "TimeStamp"
  }},
};

::uint8_t* CarMakerData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMData.CarMakerData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CMData.CarMakerDataGroup CarMakerDataGroup = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_carmakerdatagroup_size());
       i < n; i++) {
    const auto& repfield = this->_internal_carmakerdatagroup().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string TimeStamp = 2;
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CMData.CarMakerData.TimeStamp");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 StimulationSignal = 3;
  if (this->_internal_stimulationsignal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_stimulationsignal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMData.CarMakerData)
  return target;
}

::size_t CarMakerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMData.CarMakerData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMData.CarMakerDataGroup CarMakerDataGroup = 1;
  total_size += 1UL * this->_internal_carmakerdatagroup_size();
  for (const auto& msg : this->_internal_carmakerdatagroup()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string TimeStamp = 2;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // int32 StimulationSignal = 3;
  if (this->_internal_stimulationsignal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_stimulationsignal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CarMakerData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CarMakerData*>(&to_msg);
  auto& from = static_cast<const CarMakerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMData.CarMakerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_carmakerdatagroup()->MergeFrom(
      from._internal_carmakerdatagroup());
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_stimulationsignal() != 0) {
    _this->_impl_.stimulationsignal_ = from._impl_.stimulationsignal_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CarMakerData::CopyFrom(const CarMakerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMData.CarMakerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CarMakerData::IsInitialized() const {
  return true;
}

void CarMakerData::InternalSwap(CarMakerData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.carmakerdatagroup_.InternalSwap(&other->_impl_.carmakerdatagroup_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
        swap(_impl_.stimulationsignal_, other->_impl_.stimulationsignal_);
}

::google::protobuf::Metadata CarMakerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CarMakerData_2eproto_getter,
                                   &descriptor_table_CarMakerData_2eproto_once,
                                   file_level_metadata_CarMakerData_2eproto[0]);
}
// ===================================================================

class CarMakerDataGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CarMakerDataGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_._has_bits_);
};

CarMakerDataGroup::CarMakerDataGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMData.CarMakerDataGroup)
}
inline PROTOBUF_NDEBUG_INLINE CarMakerDataGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CarMakerDataGroup::CarMakerDataGroup(
    ::google::protobuf::Arena* arena,
    const CarMakerDataGroup& from)
    : ::google::protobuf::Message(arena) {
  CarMakerDataGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::CMData::Position>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::CMData::Rotation>(
                              arena, *from._impl_.rotation_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, steeringangle_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::steeringangle_));

  // @@protoc_insertion_point(copy_constructor:CMData.CarMakerDataGroup)
}
inline PROTOBUF_NDEBUG_INLINE CarMakerDataGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CarMakerDataGroup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, steeringangle_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::steeringangle_));
}
CarMakerDataGroup::~CarMakerDataGroup() {
  // @@protoc_insertion_point(destructor:CMData.CarMakerDataGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CarMakerDataGroup::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.rotation_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CarMakerDataGroup::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_._cached_size_),
              false,
          },
          &CarMakerDataGroup::MergeImpl,
          &CarMakerDataGroup::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CarMakerDataGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMData.CarMakerDataGroup)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.steeringangle_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.steeringangle_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CarMakerDataGroup::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> CarMakerDataGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CarMakerDataGroup_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMData::CarMakerDataGroup>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 Type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CarMakerDataGroup, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.type_)}},
    // int32 ID = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CarMakerDataGroup, _impl_.id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.id_)}},
    // .CMData.Position Position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.position_)}},
    // .CMData.Rotation Rotation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.rotation_)}},
    // float SteeringAngle = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.steeringangle_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 Type = 1;
    {PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ID = 2;
    {PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .CMData.Position Position = 3;
    {PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CMData.Rotation Rotation = 4;
    {PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.rotation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float SteeringAngle = 5;
    {PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.steeringangle_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMData::Position>()},
    {::_pbi::TcParser::GetTable<::CMData::Rotation>()},
  }}, {{
  }},
};

::uint8_t* CarMakerDataGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMData.CarMakerDataGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 Type = 1;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_type(), target);
  }

  // int32 ID = 2;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .CMData.Position Position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.position_, _impl_.position_->GetCachedSize(), target, stream);
  }

  // .CMData.Rotation Rotation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.rotation_, _impl_.rotation_->GetCachedSize(), target, stream);
  }

  // float SteeringAngle = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_steeringangle = this->_internal_steeringangle();
  ::uint32_t raw_steeringangle;
  memcpy(&raw_steeringangle, &tmp_steeringangle, sizeof(tmp_steeringangle));
  if (raw_steeringangle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_steeringangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMData.CarMakerDataGroup)
  return target;
}

::size_t CarMakerDataGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMData.CarMakerDataGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .CMData.Position Position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .CMData.Rotation Rotation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotation_);
    }

  }
  // int32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  // int32 ID = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // float SteeringAngle = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_steeringangle = this->_internal_steeringangle();
  ::uint32_t raw_steeringangle;
  memcpy(&raw_steeringangle, &tmp_steeringangle, sizeof(tmp_steeringangle));
  if (raw_steeringangle != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CarMakerDataGroup::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CarMakerDataGroup*>(&to_msg);
  auto& from = static_cast<const CarMakerDataGroup&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMData.CarMakerDataGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::CMData::Position>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.rotation_ != nullptr);
      if (_this->_impl_.rotation_ == nullptr) {
        _this->_impl_.rotation_ =
            ::google::protobuf::Message::CopyConstruct<::CMData::Rotation>(arena, *from._impl_.rotation_);
      } else {
        _this->_impl_.rotation_->MergeFrom(*from._impl_.rotation_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_steeringangle = from._internal_steeringangle();
  ::uint32_t raw_steeringangle;
  memcpy(&raw_steeringangle, &tmp_steeringangle, sizeof(tmp_steeringangle));
  if (raw_steeringangle != 0) {
    _this->_impl_.steeringangle_ = from._impl_.steeringangle_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CarMakerDataGroup::CopyFrom(const CarMakerDataGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMData.CarMakerDataGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CarMakerDataGroup::IsInitialized() const {
  return true;
}

void CarMakerDataGroup::InternalSwap(CarMakerDataGroup* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.steeringangle_)
      + sizeof(CarMakerDataGroup::_impl_.steeringangle_)
      - PROTOBUF_FIELD_OFFSET(CarMakerDataGroup, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata CarMakerDataGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CarMakerData_2eproto_getter,
                                   &descriptor_table_CarMakerData_2eproto_once,
                                   file_level_metadata_CarMakerData_2eproto[1]);
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMData.Position)
}
Position::Position(
    ::google::protobuf::Arena* arena, const Position& from)
    : Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, posx_),
           0,
           offsetof(Impl_, posz_) -
               offsetof(Impl_, posx_) +
               sizeof(Impl_::posz_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:CMData.Position)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Position::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Position::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Position, _impl_._cached_size_),
              false,
          },
          &Position::MergeImpl,
          &Position::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:CMData.Position)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Position::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Position_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMData::Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float PosX = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.posx_)}},
    // float PosY = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.posy_)}},
    // float PosZ = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.posz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float PosX = 1;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.posx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float PosY = 2;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.posy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float PosZ = 3;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.posz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Position::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMData.Position)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float PosX = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  ::uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_posx(), target);
  }

  // float PosY = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  ::uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_posy(), target);
  }

  // float PosZ = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posz = this->_internal_posz();
  ::uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMData.Position)
  return target;
}

::size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMData.Position)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float PosX = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  ::uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    total_size += 5;
  }

  // float PosY = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  ::uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    total_size += 5;
  }

  // float PosZ = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posz = this->_internal_posz();
  ::uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Position::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMData.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posx = from._internal_posx();
  ::uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    _this->_impl_.posx_ = from._impl_.posx_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posy = from._internal_posy();
  ::uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    _this->_impl_.posy_ = from._impl_.posy_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_posz = from._internal_posz();
  ::uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    _this->_impl_.posz_ = from._impl_.posz_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMData.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.posz_)
      + sizeof(Position::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CarMakerData_2eproto_getter,
                                   &descriptor_table_CarMakerData_2eproto_once,
                                   file_level_metadata_CarMakerData_2eproto[2]);
}
// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMData.Rotation)
}
Rotation::Rotation(
    ::google::protobuf::Arena* arena, const Rotation& from)
    : Rotation(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Rotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Rotation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rotx_),
           0,
           offsetof(Impl_, rotz_) -
               offsetof(Impl_, rotx_) +
               sizeof(Impl_::rotz_));
}
Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:CMData.Rotation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rotation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Rotation::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Rotation, _impl_._cached_size_),
              false,
          },
          &Rotation::MergeImpl,
          &Rotation::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMData.Rotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rotx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rotz_) -
      reinterpret_cast<char*>(&_impl_.rotx_)) + sizeof(_impl_.rotz_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Rotation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Rotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMData::Rotation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float RotX = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.rotx_)}},
    // float RotY = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roty_)}},
    // float RotZ = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.rotz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float RotX = 1;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.rotx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float RotY = 2;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float RotZ = 3;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.rotz_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Rotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMData.Rotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float RotX = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotx = this->_internal_rotx();
  ::uint32_t raw_rotx;
  memcpy(&raw_rotx, &tmp_rotx, sizeof(tmp_rotx));
  if (raw_rotx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_rotx(), target);
  }

  // float RotY = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roty = this->_internal_roty();
  ::uint32_t raw_roty;
  memcpy(&raw_roty, &tmp_roty, sizeof(tmp_roty));
  if (raw_roty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_roty(), target);
  }

  // float RotZ = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotz = this->_internal_rotz();
  ::uint32_t raw_rotz;
  memcpy(&raw_rotz, &tmp_rotz, sizeof(tmp_rotz));
  if (raw_rotz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_rotz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMData.Rotation)
  return target;
}

::size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMData.Rotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float RotX = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotx = this->_internal_rotx();
  ::uint32_t raw_rotx;
  memcpy(&raw_rotx, &tmp_rotx, sizeof(tmp_rotx));
  if (raw_rotx != 0) {
    total_size += 5;
  }

  // float RotY = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roty = this->_internal_roty();
  ::uint32_t raw_roty;
  memcpy(&raw_roty, &tmp_roty, sizeof(tmp_roty));
  if (raw_roty != 0) {
    total_size += 5;
  }

  // float RotZ = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotz = this->_internal_rotz();
  ::uint32_t raw_rotz;
  memcpy(&raw_rotz, &tmp_rotz, sizeof(tmp_rotz));
  if (raw_rotz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Rotation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Rotation*>(&to_msg);
  auto& from = static_cast<const Rotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMData.Rotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotx = from._internal_rotx();
  ::uint32_t raw_rotx;
  memcpy(&raw_rotx, &tmp_rotx, sizeof(tmp_rotx));
  if (raw_rotx != 0) {
    _this->_impl_.rotx_ = from._impl_.rotx_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roty = from._internal_roty();
  ::uint32_t raw_roty;
  memcpy(&raw_roty, &tmp_roty, sizeof(tmp_roty));
  if (raw_roty != 0) {
    _this->_impl_.roty_ = from._impl_.roty_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_rotz = from._internal_rotz();
  ::uint32_t raw_rotz;
  memcpy(&raw_rotz, &tmp_rotz, sizeof(tmp_rotz));
  if (raw_rotz != 0) {
    _this->_impl_.rotz_ = from._impl_.rotz_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMData.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rotation::IsInitialized() const {
  return true;
}

void Rotation::InternalSwap(Rotation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, _impl_.rotz_)
      + sizeof(Rotation::_impl_.rotz_)
      - PROTOBUF_FIELD_OFFSET(Rotation, _impl_.rotx_)>(
          reinterpret_cast<char*>(&_impl_.rotx_),
          reinterpret_cast<char*>(&other->_impl_.rotx_));
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CarMakerData_2eproto_getter,
                                   &descriptor_table_CarMakerData_2eproto_once,
                                   file_level_metadata_CarMakerData_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace CMData
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_CarMakerData_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
